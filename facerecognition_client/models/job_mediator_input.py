# coding: utf-8

"""
    Dalet Media Mediator API

    # Scope Dalet Mediator API allows you to submit long running media jobs managed by Dalet services.  Long running media jobs include: - **Media processing** such as transcoding or automatic QC. - **Automatic metadata extraction** such as automatic speech transcription or face detection.  The Dalet Mediator API is a REST API with typed schema for the payload. # Architecture Job processing is performed on the cloud via dynamic combination of microservices. Dalet Mediator adopts the [EBU MCMA] architecture.  The key objectives of this architecture are to support: - Job management and monitoring - Long running transactions - Event based communication pattern - Service registration and discovery - Horizontal scalability in an elastic manner  The architecture is implemented using the serverless approach - relying on  independent microservices accessible through well documented REST endpoints and sharing a common object model. ## Roles The following services are involved in the processing of media jobs exposed through the Dalet Media Mediator API: - **Mediator**: this is the main entry point to the architecture; this API endpoint supports: 1. Checking authentication using an API key and a token mechanism 2. Verifying quota restrictions before accepting a submitted job 3. Keeping track of usage so that job processing can be tracked and billed 4. Keeping track of jobs metadata as a job repository - **Job Processor**: once a job request is accepted by the mediator, it is assigned to a Job Processor. The Job Processor dispatches the job to an appropriate Job Worker (depending on the job profile and other criteria such as load on the system and cost of operation).  It then keeps track of the progress of the job and its status until completion and possible failures and timeout.  It reports progress to the Mediator through notifications. - **Job Worker**: The Job Worker performs the actual work on the media object, for example, AI metadata extraction (AME) or essence transcoding.  It reports progress to the Job Processor through notifications. - **Service Registry**: The Service Registry keeps track of all active services in the architecture. It is queried by the Mediator and by Processors to discover candidate services to perform jobs.  It is updated whenever a new service is launched or stopped.  The Service Registry also stores the list of all job profiles supported by one of the Job Workers deployed in the architecture. The Dalet Mediator API abstracts away from the complexity of this orchestration and provides a simple endpoint to submit long running jobs and monitor the progress of their execution.  It serves as a facade for the additional technical services for authentication, usage monitoring and service registry.  [EBU MCMA]: /https://tech.ebu.ch/groups/mcma 'EBU MCMA' ## Job Lifecycle ![Job Lifecyle Diagram](./job_lifecycle.svg 'Job Lifecycle Diagram')  ## Authentication To use the Dalet Mediator API - you must obtain an APIKey from Dalet.  This key comes in the form of two parameters: * client ID * secret  Given these two parameters, a client program must first obtain an access token (GET /auth/access-token) and then associate this token to every subsequent calls.  When the token expires, the API will return a 401 error code.  In this case, the client must request a new token and resubmit the request.   # noqa: E501

    The version of the OpenAPI document: 1.4.0
    Contact: cortexsupport@dalet.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from facerecognition_client.configuration import Configuration


class JobMediatorInput(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'project_service_id': 'str',
        'quantity': 'int',
        'tracking': 'object',
        'notification_endpoint': 'str',
        'job': 'Job'
    }

    attribute_map = {
        'project_service_id': 'projectServiceId',
        'quantity': 'quantity',
        'tracking': 'tracking',
        'notification_endpoint': 'notificationEndpoint',
        'job': 'job'
    }

    def __init__(self, project_service_id=None, quantity=None, tracking=None, notification_endpoint=None, job=None, local_vars_configuration=None):  # noqa: E501
        """JobMediatorInput - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._project_service_id = None
        self._quantity = None
        self._tracking = None
        self._notification_endpoint = None
        self._job = None
        self.discriminator = None

        self.project_service_id = project_service_id
        self.quantity = quantity
        if tracking is not None:
            self.tracking = tracking
        if notification_endpoint is not None:
            self.notification_endpoint = notification_endpoint
        self.job = job

    @property
    def project_service_id(self):
        """Gets the project_service_id of this JobMediatorInput.  # noqa: E501

        Customer Project ID.  This ID must be provided by Dalet when a Cortex service is provisioned.  It must match the authorization token you have been provided.  # noqa: E501

        :return: The project_service_id of this JobMediatorInput.  # noqa: E501
        :rtype: str
        """
        return self._project_service_id

    @project_service_id.setter
    def project_service_id(self, project_service_id):
        """Sets the project_service_id of this JobMediatorInput.

        Customer Project ID.  This ID must be provided by Dalet when a Cortex service is provisioned.  It must match the authorization token you have been provided.  # noqa: E501

        :param project_service_id: The project_service_id of this JobMediatorInput.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and project_service_id is None:  # noqa: E501
            raise ValueError("Invalid value for `project_service_id`, must not be `None`")  # noqa: E501

        self._project_service_id = project_service_id

    @property
    def quantity(self):
        """Gets the quantity of this JobMediatorInput.  # noqa: E501

        Number of units that will be charged for this job.  The unit depends on the job profile.  For example, for an AI metadata extraction job, units are seconds of media duration.  # noqa: E501

        :return: The quantity of this JobMediatorInput.  # noqa: E501
        :rtype: int
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity):
        """Sets the quantity of this JobMediatorInput.

        Number of units that will be charged for this job.  The unit depends on the job profile.  For example, for an AI metadata extraction job, units are seconds of media duration.  # noqa: E501

        :param quantity: The quantity of this JobMediatorInput.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and quantity is None:  # noqa: E501
            raise ValueError("Invalid value for `quantity`, must not be `None`")  # noqa: E501

        self._quantity = quantity

    @property
    def tracking(self):
        """Gets the tracking of this JobMediatorInput.  # noqa: E501

        Client metadata associated to the job.  This can include any identification fields provided by the client. It should identify the job in a unique manner and is useful to reconcile usage reports with client metadata.  # noqa: E501

        :return: The tracking of this JobMediatorInput.  # noqa: E501
        :rtype: object
        """
        return self._tracking

    @tracking.setter
    def tracking(self, tracking):
        """Sets the tracking of this JobMediatorInput.

        Client metadata associated to the job.  This can include any identification fields provided by the client. It should identify the job in a unique manner and is useful to reconcile usage reports with client metadata.  # noqa: E501

        :param tracking: The tracking of this JobMediatorInput.  # noqa: E501
        :type: object
        """

        self._tracking = tracking

    @property
    def notification_endpoint(self):
        """Gets the notification_endpoint of this JobMediatorInput.  # noqa: E501

        Callback URL endpoint to be called once the stage of the job is changed.  # noqa: E501

        :return: The notification_endpoint of this JobMediatorInput.  # noqa: E501
        :rtype: str
        """
        return self._notification_endpoint

    @notification_endpoint.setter
    def notification_endpoint(self, notification_endpoint):
        """Sets the notification_endpoint of this JobMediatorInput.

        Callback URL endpoint to be called once the stage of the job is changed.  # noqa: E501

        :param notification_endpoint: The notification_endpoint of this JobMediatorInput.  # noqa: E501
        :type: str
        """

        self._notification_endpoint = notification_endpoint

    @property
    def job(self):
        """Gets the job of this JobMediatorInput.  # noqa: E501


        :return: The job of this JobMediatorInput.  # noqa: E501
        :rtype: Job
        """
        return self._job

    @job.setter
    def job(self, job):
        """Sets the job of this JobMediatorInput.


        :param job: The job of this JobMediatorInput.  # noqa: E501
        :type: Job
        """
        if self.local_vars_configuration.client_side_validation and job is None:  # noqa: E501
            raise ValueError("Invalid value for `job`, must not be `None`")  # noqa: E501

        self._job = job

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, JobMediatorInput):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, JobMediatorInput):
            return True

        return self.to_dict() != other.to_dict()
